# ─── Stage 1: Builder ───────────────────────────────
FROM node:20-slim AS builder

WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm

# Copy package files first for better caching
COPY backend/package.json ./package.json

# Copy lock file if it exists, otherwise install without it
COPY backend/pnpm-lock.yaml* ./pnpm-lock.yaml

# Install dependencies with fallback
RUN corepack enable && \
    if [ -f "pnpm-lock.yaml" ]; then \
        pnpm install --frozen-lockfile; \
    else \
        pnpm install; \
    fi

# Copy source and build
COPY backend/ .
COPY backend/postgres ./postgres

# Copy agent directory for Python gold evaluator
COPY agent ./agent

# Note: Don't generate migrations during build - run them at container startup
# CMD ["./start.sh"]
# RUN sh ./start.sh

# RUN pnpm run migrate

# Build the application
RUN pnpm build


# ─── Stage 2: Runtime with Chromium for puppeteer-core ────────
FROM node:20-slim AS runner

WORKDIR /app
ENV NODE_ENV=production

# Install pnpm, netcat (nc), wget, and Python for health checks and gold evaluator agent
RUN apt-get update && apt-get install -y \
    netcat-openbsd \
    wget \
    python3 \
    python3-venv \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*
RUN npm install -g pnpm

# Copy only necessary files
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/postgres ./postgres
COPY --from=builder /app/drizzle.config.ts ./drizzle.config.ts

# Copy agent directory for Python gold evaluator
COPY --from=builder /app/agent ./agent

# Create public and uploads directories for file uploads
RUN mkdir -p /app/public/uploads

# Create and use a dedicated virtual environment for Python packages (PEP 668 compliant)
ENV PYTHON_VENV_PATH=/opt/pyenv
RUN python3 -m venv "$PYTHON_VENV_PATH" && \
    "$PYTHON_VENV_PATH/bin/pip" install --upgrade pip

# Install Python dependencies for gold evaluator agent into the venv
RUN if [ -f "./agent/requirements.txt" ]; then \
        "$PYTHON_VENV_PATH/bin/pip" install --no-cache-dir -r ./agent/requirements.txt; \
    fi

# Make the app use the venv's python
ENV PYTHON_EXECUTABLE="$PYTHON_VENV_PATH/bin/python"

EXPOSE 9487

# CMD ["pnpm", "run", "dev"]

CMD ["node", "dist/main.js"]

HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD wget --quiet --spider http://localhost:9487/api/v1/health || exit 1